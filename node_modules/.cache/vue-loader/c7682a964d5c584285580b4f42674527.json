{"remainingRequest":"/Users/mac/work_space/vue/wblog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/work_space/vue/wblog/src/components/UpdateUser.vue?vue&type=style&index=0&id=4db22738&scoped=true&lang=css&","dependencies":[{"path":"/Users/mac/work_space/vue/wblog/src/components/UpdateUser.vue","mtime":1624868639162},{"path":"/Users/mac/work_space/vue/wblog/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/work_space/vue/wblog/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mac/work_space/vue/wblog/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mac/work_space/vue/wblog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/work_space/vue/wblog/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWNvbCB7CiAgYm9yZGVyLXJhZGl1czogNHB4OwogIGhlaWdodDogNzAwcHg7Cn0KICAKLmJnLXB1cnBsZSB7CiAgaGVpZ2h0OiAxMDAlOwp9CiAgCi5ncmlkLWNvbnRlbnQgewogIGJvcmRlci1yYWRpdXM6IDRweDsKICBtaW4taGVpZ2h0OiAzNnB4Owp9CiAgCi5sb2dpbi1mb3JtIHsKICBjb2xvcjogeWVsbG93OwogIG1hcmdpbi10b3A6IC0yMHB4OwogIHdpZHRoOiA4MCU7Cn0KICAKCiAuYXZhdGFyLXVwbG9hZGVyIC5lbC11cGxvYWQgewogICAgYm9yZGVyOiAxcHggZGFzaGVkICNkOWQ5ZDk7CiAgICBib3JkZXItcmFkaXVzOiA2cHg7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogIH0KICAuYXZhdGFyLXVwbG9hZGVyIC5lbC11cGxvYWQ6aG92ZXIgewogICAgYm9yZGVyLWNvbG9yOiAjNDA5RUZGOwogIH0KICAuYXZhdGFyLXVwbG9hZGVyLWljb24gewogICAgZm9udC1zaXplOiAyOHB4OwogICAgY29sb3I6ICM4YzkzOWQ7CiAgICB3aWR0aDogMTc4cHg7CiAgICBoZWlnaHQ6IDE3OHB4OwogICAgbGluZS1oZWlnaHQ6IDE3OHB4OwogICAgdGV4dC1hbGlnbjogY2VudGVyOwogIH0KICAuYXZhdGFyIHsKICAgIHdpZHRoOiAxNzhweDsKICAgIGhlaWdodDogMTc4cHg7CiAgICBkaXNwbGF5OiBibG9jazsKICB9Cg=="},{"version":3,"sources":["UpdateUser.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyMA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UpdateUser.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <el-dialog\n    title=\"更新用户\"\n    :visible.sync=\"UpdateUserDialogVisible\"\n    width=\"40%\"\n    :modal-append-to-body=\"false\"\n    :show-close=\"false\"\n    top=\"50px\"\n  >\n    <div class=\"login-form\">\n      <el-form\n        :model=\"ruleForm\"\n        status-icon\n        :rules=\"rules\"\n        ref=\"ruleForm\"\n        label-width=\"100px\"\n        class=\"demo-ruleForm\"\n        label-position=\"right\"\n      >\n        <el-form-item label=\"用户名\" prop=\"userName\">\n          <el-input type=\"text\" v-model=\"ruleForm.userName\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"是否修改头像\" prop=\"isUpdateProfilerPhoto\">\n          <el-switch\n            v-model=\"isUpdateProfilerPhoto\"\n            active-text=\"是\"\n            inactive-text=\"否\"\n            autocomplete=\"off\"\n          ></el-switch>\n        </el-form-item>\n        <template v-if=\"isUpdateProfilerPhoto\">\n          <el-form-item label=\"上传图片\">\n            <el-upload\n              class=\"avatar-uploader\"\n              action\n              :show-file-list=\"false\"\n              :on-success=\"handleAvatarSuccess\"\n              :before-upload=\"beforeAvatarUpload\"\n            >\n              <img v-if=\"imageUrl\" :src=\"imageUrl\" class=\"avatar\" />\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n            </el-upload>\n          </el-form-item>\n        </template>\n        <el-form-item label=\"是否修改密码\" prop=\"isUpdatePass\">\n          <el-switch v-model=\"isUpdatePass\" active-text=\"是\" inactive-text=\"否\" autocomplete=\"off\"></el-switch>\n        </el-form-item>\n        <template v-if=\"isUpdatePass\">\n          <el-form-item label=\"旧密码\" prop=\"oldPass\">\n            <el-input type=\"password\" v-model=\"ruleForm.oldPass\" autocomplete=\"off\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"新密码\" prop=\"newPass\">\n            <el-input type=\"password\" v-model=\"ruleForm.newPass\" autocomplete=\"off\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"确认密码\" prop=\"checkPass\">\n            <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\n          </el-form-item>\n        </template>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitForm('ruleForm')\" size=\"small\">提交</el-button>\n          <el-button\n            @click=\"setActionUpdateUserDialogVisibleState(!UpdateUserDialogVisible)\"\n            size=\"small\"\n          >取 消</el-button>\n          <el-button @click=\"resetForm('ruleForm')\" size=\"small\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport { Message } from \"element-ui\";\n\nVue.component(Message.name, Message);\nimport { mapState, mapActions } from \"vuex\";\nexport default {\n  data() {\n    var checkUserName = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error(\"用户名不能为空\"));\n      }\n      setTimeout(() => {\n        if (value.length < 2) {\n          callback(new Error(\"用户名长度不能小于两位\"));\n        } else {\n          callback();\n        }\n      }, 1000);\n    };\n    var validateOldPass = (rule, value, callback) => {\n      //去某个地方取旧的密码 和新的密码做比较  这里可能会选择 取服务器取 做异步处理\n      callback();\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));\n      } else if (value.length < 8) {\n        callback(new Error(\"密码长度不能小于8位\"));\n      } else {\n        if (this.ruleForm.checkPass !== \"\") {\n          this.$refs.ruleForm.validateField(\"checkPass\");\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请再次输入密码\"));\n      } else if (value !== this.ruleForm.newPass) {\n        callback(new Error(\"两次输入密码不一致\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        userName: \"初始化后的用户名\",\n        oldPass: \"\",\n        newPass: \"\",\n        checkPass: \"\",\n      },\n      isUpdatePass: false,\n      isUpdateProfilerPhoto: false,\n      imageUrl: \"\",\n      rules: {\n        userName: [{ validator: checkUserName, trigger: \"blur\" }],\n        oldPass: [{ validator: validateOldPass, trigger: \"blur\" }],\n        newPass: [{ validator: validatePass, trigger: \"blur\" }],\n        checkPass: [{ validator: validatePass2, trigger: \"blur\" }],\n      },\n    };\n  },\n\n  computed: {\n    ...mapState(\"user\", {\n      UpdateUserDialogVisible: \"UpdateUserDialogVisibleState\",\n    }),\n  },\n  methods: {\n    ...mapActions(\"user\", [\"setActionUpdateUserDialogVisibleState\"]),\n    handleAvatarSuccess(res, file) {\n      this.imageUrl = URL.createObjectURL(file.raw);\n    },\n    beforeAvatarUpload(file) {\n      const isJPG = file.type === \"image/jpeg\";\n      const isLt2M = file.size / 1024 / 1024 < 2;\n\n      if (!isJPG) {\n        this.$message.error(\"上传头像图片只能是 JPG 格式!\");\n      }\n      if (!isLt2M) {\n        this.$message.error(\"上传头像图片大小不能超过 2MB!\");\n      }\n      return isJPG && isLt2M;\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate(async (valid) => {\n        if (valid) {\n          //提交成功后 做的处理 这里会调用 注册的api\n          let params = {\n            user_name: this.ruleForm.user_name,\n            pass_word: this.ruleForm.pass,\n          };\n          let result = await this.$http.signUp(\"/signup\", params);\n          //console.log(result);\n          //取到返回值后在这里进行判断\n          //如果 message的值为 ”注册成功” 就关闭弹窗   做后续的处理\n          console.log(result.data.message === \"注册成功\");\n          if (result.data.message === \"注册成功\") {\n            this.setActionUpdateUserDialogVisibleState(\n              !this.UpdateUserDialogVisible\n            );\n            Message.success({\n              message: result.data.message,\n            });\n          } else {\n            //console.log(result.data.message);\n            Message.warning({\n              message: result.data.message,\n            });\n          }\n          //如果message的值不是“注册成功”  就不关闭弹窗  跳出警告\n          //alert(\"submit!\");\n\n          //处理结束后, 关闭登陆弹窗\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n  },\n};\n</script>\n\n<style  scoped>\n.el-col {\n  border-radius: 4px;\n  height: 700px;\n}\n  \n.bg-purple {\n  height: 100%;\n}\n  \n.grid-content {\n  border-radius: 4px;\n  min-height: 36px;\n}\n  \n.login-form {\n  color: yellow;\n  margin-top: -20px;\n  width: 80%;\n}\n  \n\n .avatar-uploader .el-upload {\n    border: 1px dashed #d9d9d9;\n    border-radius: 6px;\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n  }\n  .avatar-uploader .el-upload:hover {\n    border-color: #409EFF;\n  }\n  .avatar-uploader-icon {\n    font-size: 28px;\n    color: #8c939d;\n    width: 178px;\n    height: 178px;\n    line-height: 178px;\n    text-align: center;\n  }\n  .avatar {\n    width: 178px;\n    height: 178px;\n    display: block;\n  }\n</style>"]}]}